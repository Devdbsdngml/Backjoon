import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws IOException{
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        LinkedList<Integer> list = new LinkedList<>();
        boolean[] visited = new boolean[n+1];
        
        permutation(list, visited, n, m);
    }
    
    // 순열
    public static void permutation(LinkedList<Integer> list, boolean[] visited, int n, int m){
        if(list.size() == m){
            for(int i : list)
                System.out.print(i+" ");
            System.out.println();
            return;
        }
        
        for(int i=1; i<=n; i++){
            if(!visited[i]){
                visited[i] = true;
                list.add(i);
                permutation(list, visited, n , m);
                list.removeLast();
                visited[i] = false;
            }
        }
    }
}

// 다른 사람 순열 풀이
public class Main{  
	
	static int n,m;
    static boolean[] used;
    static int[] set;
    static StringBuilder sb = new StringBuilder();
    static void backtrack(int k)
    {
    	if(k==m)
    	{
    		for(int x=0;x<m;x++)
    		{   
    			sb.append(set[x]).append(' ');
    		}   
    		sb.append('\n');
    		return;
    	}
    	
    	for(int x=0;x<n;x++)
    	{
    		if(!used[x])
    		{   
    			set[k]= x+1;
    			used[x] =true;
    			backtrack(k+1);
    			used[x]=false;
    		}
    	}
    }
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
      used = new boolean[n];
      set = new int[m];
      backtrack(0);
      System.out.println(sb);
	}

}