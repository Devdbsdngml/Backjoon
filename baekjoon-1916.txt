import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main{
    static class Edge implements Comparable<Edge>{
        int to; // 가야할 곳
        int cost; // 비용

        Edge(int to, int cost){
            this.to = to;
            this.cost = cost;
        }

        public int compareTo(Edge o){
            return this.cost - o.cost;
        }
    }
    private static BufferedReader br;
    private static BufferedWriter bw;

    private static int N; // 도시의 개수
    private static int M; // 버스의 개수
    private static int A; // 출발점의 도시 번호
    private static int B; // 도착점의 도시 번호

    private static ArrayList<ArrayList<Edge>> adj; // 도시의 정보
    private static PriorityQueue<Edge> que;
    private static int[] dist;

    private static final int maxCost = 100_000_001;

    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        N = Integer.parseInt(br.readLine());
        M = Integer.parseInt(br.readLine());

        adj = new ArrayList<>();
        que = new PriorityQueue<>();
        dist = new int[N+1];

        for(int i=0; i<=N; i++){
            adj.add(new ArrayList<>());
        }
        Arrays.fill(dist, maxCost);

        for(int i=0; i<M; i++){
            st = new StringTokenizer(br.readLine());

            int from = Integer.parseInt(st.nextToken());
            int to = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());

            adj.get(from).add(new Edge(to, cost));
        }

        st = new StringTokenizer(br.readLine());
        A = Integer.parseInt(st.nextToken());
        B = Integer.parseInt(st.nextToken());

        dist[A] = 0;
        que.offer(new Edge(A, 0));

        dijkstra();

        bw.write(""+dist[B]);

        bw.flush();
        br.close();
        bw.close();
    }

    private static void dijkstra() {
        while(!que.isEmpty()){
            Edge edge = que.poll();

            if(edge.to == B) break;

            for(Edge nextEdge : adj.get(edge.to)){
                if(dist[nextEdge.to] > dist[edge.to] + nextEdge.cost){
                    dist[nextEdge.to] = dist[edge.to] + nextEdge.cost;
                    que.offer(new Edge(nextEdge.to, dist[nextEdge.to]));
                }
            }
        }
    }
}