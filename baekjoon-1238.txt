import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main{
    static class Edge implements Comparable<Edge>{
        int to;
        int cost;

        public Edge(int to, int cost) {
            this.to = to;
            this.cost = cost;
        }

        @Override
        public int compareTo(Edge o) {
            return this.cost - o.cost;
        }
    }
    private static BufferedReader br;
    private static BufferedWriter bw;

    private static int N; // 마을의 개수
    private static int M; // 마을 사이의 도로 개수 (단방향)
    private static int X; // 파티를 벌일 마을 && 모든 학생들이 갈 수 있는 마을

    private static ArrayList<ArrayList<Edge>> goAdj, comeAdj; // 마을의 연결 정보(다른 마을에서 X까지 가고 정보, X에서 다른 마을 가고 정보 2개)
    private static PriorityQueue<Edge> que; // dijkstra
    private static int[] goDist, comeDist; // 거리 정보 배열(마찬가지로 가고 오고 2개)

    private static final int maxCost = 1_000_001;

    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        X = Integer.parseInt(st.nextToken());

        goAdj = new ArrayList<>();
        comeAdj = new ArrayList<>();

        que = new PriorityQueue<>();

        goDist = new int[N+1];
        comeDist = new int[N+1];

        for(int i=0; i<=N; i++){
            goAdj.add(new ArrayList<>());
            comeAdj.add(new ArrayList<>());
        }
        Arrays.fill(goDist, maxCost);
        Arrays.fill(comeDist, maxCost);

        for(int i=0; i<M; i++){
            st = new StringTokenizer(br.readLine());

            int from = Integer.parseInt(st.nextToken());
            int to = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());

            goAdj.get(from).add(new Edge(to, cost));
            comeAdj.get(to).add(new Edge(from, cost));
        }

        // X 부터 다른 마을까지 가는 데 최소 비용
        dijkstra(goAdj, goDist, X);

        // 다른 마을에서 X 까지 가는 데 최소 비용
        dijkstra(comeAdj, comeDist, X);

        int max = -1; // 가장 오래걸리는 학생 시간
        for(int i=1; i<=N; i++){
            int time = goDist[i] + comeDist[i];

            if(time > max){
                max = time;
            }
        }
        bw.write(max+"");

        bw.flush();
        br.close();
        bw.close();
    }

    private static void dijkstra(ArrayList<ArrayList<Edge>> adj, int[] dist, int start) {
        dist[start] = 0;
        que.offer(new Edge(start, 0));

        boolean[] visited = new boolean[N+1];

        while(!que.isEmpty()){
            Edge edge = que.poll();

            if(visited[edge.to]) continue;
            visited[edge.to] = true;

            for(Edge nextEdge : adj.get(edge.to)){
                if(dist[nextEdge.to] > dist[edge.to] + nextEdge.cost){
                    dist[nextEdge.to] = dist[edge.to] + nextEdge.cost;
                    que.offer(new Edge(nextEdge.to, dist[nextEdge.to]));
                }
            }
        }
    }
}