import java.util.*;
import java.io.*;

public class Main{
    static class Point{
        int x;
        int y;
        Point(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    static int[] dx = {0, -1, 0, 1};
    static int[] dy = {-1, 0, 1, 0};
    
    static int[][] map;
    static boolean[][] visited;
    static int N;
    static int M;
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        
        map = new int[N][M];
        visited = new boolean[N][M];
        
        for(int i=0; i<N; i++){
            String input = br.readLine();
            for(int j=0; j<M; j++){
                map[i][j] = input.charAt(j) - '0';
            }
        }
        bfs(0,0);
        System.out.println(map[N-1][M-1]);
    }
    
    static void bfs(int x, int y){
        Queue<Point> que = new LinkedList<>();
        que.add(new Point(x, y));
        visited[x][y] = true;
        
        while(!que.isEmpty()){
            Point point = que.poll();
            
            for(int i=0; i<4; i++){
                int nx = point.x + dx[i];
                int ny = point.y + dy[i];
                if(0 <= nx && nx < N && 0 <= ny && ny < M){
                    if(map[nx][ny] != 0 && !visited[nx][ny]){
                        que.add(new Point(nx, ny));
                        visited[nx][ny] = true;
                        map[nx][ny] = map[point.x][point.y] + 1;
                    }
                }
            }
        }
    }
}