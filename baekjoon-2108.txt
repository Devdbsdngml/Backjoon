import java.util.*;
import java.io.*;

public class Main{
    public static BufferedReader br;
    public static BufferedWriter bw;
    
    public static void main(String[] args)throws IOException{
        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        
        int n = Integer.parseInt(br.readLine());
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = Integer.parseInt(br.readLine());
        }
        bw.write(String.valueOf(avg(arr))+"\n");
        bw.write(String.valueOf(median(arr))+"\n");
        bw.write(String.valueOf(mode(arr))+"\n");
        bw.write(String.valueOf(range(arr))+"\n");
        
        bw.flush();
    }
    
    // 산술평균
    public static int avg(int[] arr){
        int answer = 0;
        double sum = 0;
        for(double d : arr){
            sum += d;
        }
        answer = (int)Math.round(sum/arr.length);
        return answer;
    }
    
    // 중앙값
    public static int median(int[] arr){
        int answer = 0;
        Arrays.sort(arr);
        answer = arr[arr.length/2];
        return answer;
    }
    
    // 최빈값 counting sort
    public static int mode(int[] arr){
        int n = arr.length;
        int max = Integer.MIN_VALUE;
        List<Integer> list = new ArrayList<>();
        int[] modearr = new int[8001];
        
        for(int i=0; i<n; i++){
            modearr[arr[i]+4000]++;
        }
        for(int i=0; i<modearr.length; i++){
            if(modearr[i] >= max){
                max = modearr[i];
            }
        }
        for(int i=0; i<modearr.length; i++){
            if(modearr[i] == max){
                list.add(i-4000);
            }
        }
        if(list.size() == 1){
            return list.get(0);
        } else{
            Collections.sort(list);
            return list.get(1);
        }
    }
    
    // 범위
    public static int range(int[] arr){
        int answer = 0;
        Arrays.sort(arr);
        answer = arr[arr.length-1]-arr[0];
        return answer;
    }
}