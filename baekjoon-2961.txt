import java.io.*;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main{
    /*
    * input :
    * 4
    * 1 7
    * 2 6
    * 3 8
    * 4 9
    *
    * purpose :
    * 신맛(S)은 곱(*)  쓴맛(B)은 합(+) 해서 신맛과 쓴맛의 차이가 최소가 되게
    * 단, 재료는 적어도 하나 사용해야함
    *
    * Hint :
    * 2, 3, 4번 재료를 사용한다면, 요리의 신맛은 2×3×4=24, 쓴맛은 6+8+9=23이 된다. 차이는 1이다.
    *
    * Conditions :
    * 1 <= N <= 10
    * 신맛과 쓴맛은 1,000,000,000 보다 작은 작은 양의 정수
    *
    * */
    static class Flavor{
        int S; // 신맛
        int B; // 쓴맛

        Flavor(int S, int B){
            this.S = S;
            this.B = B;
        }
    }
    private static BufferedReader br;
    private static BufferedWriter bw;

    private static int N;
    private static ArrayList<Flavor> list;
    private static boolean[] checked;
    private static int ans = Integer.MAX_VALUE;

    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        N = Integer.parseInt(br.readLine());

        list = new ArrayList<>();
        checked = new boolean[N];

        // 신맛 쓴맛 list add
        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            list.add(new Flavor(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken())));
        }

        findMin(0, 0, 1, 0);
        bw.write(""+ans);

        bw.flush();
        br.close();
        bw.close();
    }

    private static void findMin(int cnt, int pos, int mul, int sum) {
        // 최소 한 개 이상의 재료가 선택이 되어야 함
        if(cnt > 0){
            int val = Math.abs(mul - sum);
            ans = Math.min(ans, val);
        }
        
        // 중복없이 모든 경우의 수 탐색 : (1,2,3) == (2,1,3) == (3,2,1) ...
        for(int i=pos; i<N; i++){
            if(!checked[i]){
                checked[i] = true;
                findMin(cnt + 1, i, mul * list.get(i).S, sum + list.get(i).B);
                checked[i] = false;
            }
        }
    }
}