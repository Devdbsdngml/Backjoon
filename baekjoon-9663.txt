import java.util.*;
import java.io.*;

public class Main{
    
    static int[] col = new int[15];
    static int n;
    static int answer;
    
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        
        dfs(0);
        
        System.out.println(answer);
    }
    
    public static void dfs(int row){
        // row가 마지막 행까지 수행하면 찾기 완료
        if(row == n){
            answer++;
            return;
        }
            
        for(int i=0; i<n; i++){
            col[row] = i; 
            
            if(isPromising(row)){
                dfs(row+1);
            }
        }
    }
    
    public static boolean isPromising(int row){
        for(int i=0; i<row; i++){
	// 같은 열이면 안 됨
            if(col[i] == col[row])
                return false;
            
	// 대각선상에 있으면 안 됨
            if(Math.abs(col[i] - col[row]) == Math.abs(i - row))
                return false;
        }
        return true;
    }
}

// 바킹독님 해설 후 풀이
import java.io.*;

public class Main{
    private static BufferedReader br;
    private static BufferedWriter bw;

    private static int N;
    private static int cnt;
    private static boolean[] isUsed1; // 같은 열에 있는지 확인
    private static boolean[] isUsed2; // 좌측하단~우측상단 대각선 (/) 에 있는지 확인 -> x+y가 같을 때!
    private static boolean[] isUsed3; // 좌측상단~우측하단 대각선 (\) 에 있는지 확인 -> |x-y|가 같을 때! Math.abs는 안 된다


    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());

        isUsed1 = new boolean[N];
        isUsed2 = new boolean[2*N - 1];
        isUsed3 = new boolean[2*N - 1];

        cnt = 0;
        dfs(0);
        bw.write(""+cnt);

        bw.flush();
        br.close();
        bw.close();
    }

    private static void dfs(int row){
        if(row == N){
            cnt++;
            return;
        }

        for(int col=0; col<N; col++){
            // 각 배열이 참이면 -> 퀸이 놓여 있다
            if(isUsed1[col] || isUsed2[col+row] || isUsed3[col-row+(N-1)]){
                continue;
            }

            isUsed1[col] = true;
            isUsed2[col+row] = true;
            isUsed3[col-row+(N-1)] = true;
            dfs(row + 1);
            isUsed1[col] = false;
            isUsed2[col+row] = false;
            isUsed3[col-row+(N-1)] = false;
        }
    }
}