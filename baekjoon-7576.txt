import java.util.*;
import java.io.*;

public class Main{
    static class Point{
        int x;
        int y;
        Point(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    static int[] dx = {-1, 0, 1, 0};
    static int[] dy = {0, -1, 0, 1};
    
    static int[][] tomato;
    static boolean[][] visited;
    static int M;
    static int N;
    
    public static void main(String args[]) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        
        st = new StringTokenizer(br.readLine());
        M = Integer.parseInt(st.nextToken()); // 가로
        N = Integer.parseInt(st.nextToken()); // 세로
        
        tomato = new int[N][M];
        visited = new boolean[N][M];
        
        // 토마토 위치
        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<M; j++){
                tomato[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        
        bfs();
    }
    
    static void bfs(){
        Queue<Point> que = new LinkedList<>();
        
        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(tomato[i][j] == 1){
                    que.add(new Point(i, j));
                    visited[i][j] = true;
                }
            }
        }
        
        while(!que.isEmpty()){
            Point point = que.poll();
            
            for(int i=0; i<4; i++){
                int nx = point.x + dx[i];
                int ny = point.y + dy[i];
                
                if(0 <= nx && nx < N && 0 <= ny && ny < M){
                    if(tomato[nx][ny] == 0 && !visited[nx][ny]){
                        tomato[nx][ny] = tomato[point.x][point.y] + 1;
                        que.add(new Point(nx, ny));
                        visited[nx][ny] = true;
                    }
                }
            }
        }
        int max = -1;
        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(tomato[i][j] == 0){
                    System.out.println(-1);
                    return;
                }
                
                max = Math.max(tomato[i][j], max);
            }
        }
        System.out.println(max - 1);
    }
}