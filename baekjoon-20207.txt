// 로직은 생각했는데 구현이 조금 어려워서 블로그 참고해서 힌트를 얻고 푼 풀이
import java.io.*;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main{
    static class Schedule implements Comparable<Schedule>{
        int start;
        int end;

        Schedule(int start, int end){
            this.start = start;
            this.end = end;
        }

        @Override
        public int compareTo(Schedule o) {
            if(this.start > o.start){
                return 1;
            } else if(this.start == o.start){
                if(this.end > o.end){
                    return 1;
                }
            }
            return -1;
        }
    }
    private static BufferedReader br;
    private static BufferedWriter bw;

    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st;
        PriorityQueue<Schedule> list = new PriorityQueue<>();
        int area = 0;
        int h = 0; // height
        int w = 0; // width
        boolean flag = false; // 일정이 연속됐는지 확인 flag
        boolean[][] checked = new boolean[1001][366]; // schedule check!

        int N = Integer.parseInt(br.readLine());

        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            int S = Integer.parseInt(st.nextToken());
            int E = Integer.parseInt(st.nextToken());
            list.offer(new Schedule(S, E));
        }

        // 일정 체크 배열 채우기
        while(!list.isEmpty()){
            Schedule schedule = list.poll();
            for(int i=1; i<1001; i++){
                if(!checked[i][schedule.start]){
                    for(int j=schedule.start; j< schedule.end+1; j++){
                        checked[i][j] = true;
                    }
                    break;
                }
            }
        }

        for(int j=1; j<366; j++){
            flag = false;
            for(int i=1; i<1001; i++){
                if(checked[i][j]){
                    flag = true;
                    h = Math.max(i, h);
                }
            }
            if(flag){
                w++;
            } else{
                area += (w * h);
                w = 0;
                h = 0;
            }
        }
        // 일정 배열의 끝까지 일정이 존재할 경우 면적(area)에 추가해야됨
        if(flag) area += (w * h);

        bw.write(""+area);

        bw.flush();
        br.close();
        bw.close();
    }
}

// 다른 사람 풀이(미쳤다...) 참고해서 푼 풀이
import java.io.*;
import java.util.StringTokenizer;

public class Main{
    private static BufferedReader br;
    private static BufferedWriter bw;

    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        int N = Integer.parseInt(br.readLine());
        int[] schedule = new int[367];
        int area = 0;

        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            int S = Integer.parseInt(st.nextToken());
            int E = Integer.parseInt(st.nextToken());
            for(int j=S; j<E+1; j++){
                schedule[j]++;
            }
        }

        for(int i=1; i<schedule.length; i++){
            int w = 0;
            int h = 0;
            while(schedule[i] != 0){
                h = Math.max(h, schedule[i]);
                w++;
                i++;
            }
            area += (w*h);
        }
        bw.write(""+area);

        bw.flush();
        br.close();
        bw.close();
    }
}