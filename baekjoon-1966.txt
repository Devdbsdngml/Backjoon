import java.util.*;
import java.io.*;

class Doc {
    private int seq;
    private int pri;
    
    public Doc(int seq, int pri){
        this.seq = seq;
        this.pri = pri;
    }
    // setter, getter
    public void setSeq(int seq){
        this.seq = seq;
    }
    
    public int getSeq(){
        return seq;
    }
    
    public void setPri(int pri){
        this.pri = pri;
    }
    
    public int getPri(){
        return pri;
    }
}

public class Main{
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        
        int testCase = Integer.parseInt(br.readLine());
        for(int i=0; i<testCase; i++){
            st = new StringTokenizer(br.readLine());
            int n = Integer.parseInt(st.nextToken());
            int m = Integer.parseInt(st.nextToken());
            int[] priority = new int[n];
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<n; j++){
                priority[j] = Integer.parseInt(st.nextToken());
            }
            bw.write(String.valueOf(print(n, m, priority))+"\n");
            bw.flush();
        }
    }
    
    public static int print(int n, int m, int[] priority){
        Queue<Doc> q = new LinkedList<>();
        for(int i=0; i<priority.length; i++){
            q.add(new Doc(i, priority[i]));
        }
        int answer = 1;
        while(true){
            if(check(q)){
                if(q.poll().getSeq() == m)
                    return answer;
                else
                    answer++;
            }
        }
    }
    
    public static boolean check(Queue<Doc> q){
        for(int i=1; i<q.size(); i++){
            if(q.peek().getPri() < ((LinkedList<Doc>)q).get(i).getPri()){
                q.add(q.poll());
                return false;
            }
        }
        return true;
    }
}