import java.util.*;
import java.io.*;

public class Main{
    static ArrayList<Integer>[] a;
    static StringBuilder sb = new StringBuilder();
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        
        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        int v = Integer.parseInt(st.nextToken());
        
        a = new ArrayList[n+1];
        boolean[] c = new boolean[n+1];
        
        for(int i=0; i<=n; i++){
            a[i] = new ArrayList<>();
        }
        
        for(int i=0; i<m; i++){
            st = new StringTokenizer(br.readLine());
            int v1 = Integer.parseInt(st.nextToken());
            int v2 = Integer.parseInt(st.nextToken());
            
            a[v1].add(v2);
            a[v2].add(v1);
        }
        
        for(int i=0; i<=n; i++){
            Collections.sort(a[i]);
        }
        
        dfs(a, c, v);
        sb.append("\n");
        Arrays.fill(c, false);
        bfs(a, c, v);
        System.out.println(sb);
    }
    
    static void dfs(ArrayList<Integer>[] a, boolean[] c, int v){
        if(c[v])
            return;
        
        c[v] = true;
        sb.append(v+" ");
        
        for(int vv : a[v]){
            if(!c[vv])
                dfs(a, c, vv);
        }
    }
    
    static void bfs(ArrayList<Integer>[] a, boolean[] c, int v){
        Queue<Integer> q = new LinkedList<>();
        
        q.add(v);
        c[v] = true;
        
        while(!q.isEmpty()){
            v = q.poll();
            sb.append(v+" ");
            
            for(int vv : a[v]){
                if(!c[vv]){
                    q.add(vv);
                    c[vv] = true;
                }
            }
        }
    }
}