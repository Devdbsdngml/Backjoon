import java.io.*;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main{
    static class Point{
        int x;
        int y;

        Point(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    private static BufferedReader br;
    private static BufferedWriter bw;

    private static int N, M;
    private static int ans = Integer.MAX_VALUE;
    private static boolean[] visited;
    private static ArrayList<Point> houses;
    private static ArrayList<Point> chickens;

    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        houses = new ArrayList<>();
        chickens = new ArrayList<>();

        // 치킨집, 집의 좌표를 List에 저장
        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<N; j++){
                int tmp = Integer.parseInt(st.nextToken());

                if(tmp == 1){
                    houses.add(new Point(i, j));
                } else if(tmp == 2){
                    chickens.add(new Point(i, j));
                }
            }
        }

        visited = new boolean[chickens.size()];
        dfs(0, 0);
        bw.write(""+ans);

        bw.flush();
        br.close();
        bw.close();
    }

    private static void dfs(int cnt, int idx) {
        if(cnt == M){
            int val = 0;

            // 모든 집에 대해서 M개의 치킨집 중 visited = true 한 치킨집과의 최단 거리를 계산
            for(int i=0; i<houses.size(); i++){
                int tmp = Integer.MAX_VALUE;
                for(int j=0; j<chickens.size(); j++){
                    if(visited[j]){
                        int dis = Math.abs(houses.get(i).x - chickens.get(j).x) +
                                Math.abs(houses.get(i).y - chickens.get(j).y);

                        tmp = Math.min(tmp, dis);
                    }
                }
                val += tmp;
            }
            ans = Math.min(ans, val);
            return;
        }

        // 이게 백트래킹
        for(int i=idx; i<chickens.size(); i++){
            visited[i] = true;
            dfs(cnt + 1, i + 1);
            visited[i] = false;
        }
    }
}