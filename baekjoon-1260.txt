import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        
        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        int v = Integer.parseInt(st.nextToken());
        int[][] a = new int[n+1][n+1];
        boolean[] c = new boolean[n+1];
        
        for(int i=0; i<m; i++){
            st = new StringTokenizer(br.readLine());
            int v1 = Integer.parseInt(st.nextToken());
            int v2 = Integer.parseInt(st.nextToken());
            
            a[v1][v2] = 1;
            a[v2][v1] = 1;
        }
        dfs(a, c, v, true);
        System.out.println();
        Arrays.fill(c, false);
        bfs(a, c, v);
    }
    
    static void dfs(int[][] a, boolean[] c, int v, boolean flag){
        Stack<Integer> s = new Stack<>();
        int n = a.length-1;
        
        s.push(v);
        c[v] = true;
        System.out.printf(v+" ");
        
        while(!s.isEmpty()){
            int vv = s.peek();
            flag = false;
            
            for(int i=1; i<=n; i++){
                if(a[vv][i] == 1 && !c[i]){
                    s.push(i);
                    System.out.printf(i+" ");
                    
                    c[i] = true;
                    flag = true;
                    break;
                }
            }
            if(!flag)
                s.pop();
        }
    }
    
    static void bfs(int[][] a, boolean[] c, int v){
        Queue<Integer> q = new LinkedList<>();
        int n = a.length-1;
        
        q.add(v);
        c[v] = true;
        
        while(!q.isEmpty()){
            v = q.poll();
            System.out.printf(v+" ");
            
            for(int i=1; i<=n; i++){
                if(a[v][i] == 1 && !c[i]){
                    q.add(i);
                    c[i] = true;
                }
            }
        }
    }
}