import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        
        int n = Integer.parseInt(br.readLine());
        int m = Integer.parseInt(br.readLine());

        int[][] nodes = new int[n+1][n+1];
        boolean[] visited = new boolean[n+1];

        for(int i=0; i<m; i++){
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            nodes[a][b] = 1;
            nodes[b][a] = 1;
        }
        bfs(nodes, visited, 1);
    }
    
    static void bfs(int[][] nodes, boolean[] visited, int start){
        Queue<Integer> que = new LinkedList<>();
        int n = nodes.length;
        int cnt = 0;
        
        que.add(start);
        visited[start] = true;
        
        while(!que.isEmpty()){
            start = que.poll();
            
            for(int i=1; i<n; i++){
                if(nodes[start][i] == 1 && !visited[i]){
                    que.add(i);
                    visited[i] = true;
                    cnt++;
                }
            }
        }
        System.out.println(cnt);
    }
}


// dfs
import java.util.*;
import java.io.*;

public class Main{
    
    static int cnt;
    static int[][] node;
    static boolean[] visited;
    static int N;
    static int M;
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        
        N = Integer.parseInt(br.readLine());
        M = Integer.parseInt(br.readLine());
        
        node = new int[N+1][N+1];
        visited = new boolean[N+1];
        
        for(int i=0; i<M; i++){
            st = new StringTokenizer(br.readLine());
            int u = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());
            node[u][v] = 1;
            node[v][u] = 1;
        }
        
        dfs(1);
        
        System.out.println(cnt);
    }
    
    static void dfs(int depth){
        visited[depth] = true;
        int n = node.length;
        
        for(int i=1; i<n; i++){
            if(node[depth][i] == 1 && !visited[i]){
                cnt++;
                dfs(i);
            }
        }
    }
}