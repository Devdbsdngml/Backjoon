import java.io.*;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main{
    private static BufferedReader br;
    private static BufferedWriter bw;

    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken()); // DNA의 수
        int M = Integer.parseInt(st.nextToken()); // 문자열의 길이
        String[] dna = new String[N];

        for(int i=0; i<N; i++){
            dna[i] = br.readLine();
        }

        int max = 0;
        int hd = 0; // hamming distance
        StringBuilder sb = new StringBuilder();

        for(int i=0; i<M; i++){
            int[] atgc = new int[4];
            for(int j=0; j<N; j++){
                char c = dna[j].charAt(i);
                switch (c){
                    case 'A' : atgc[0]++; break;
                    case 'T' : atgc[1]++; break;
                    case 'G' : atgc[2]++; break;
                    case 'C' : atgc[3]++; break;
                }
            }
            max = Arrays.stream(atgc).max().getAsInt();
            hd += (N-max);
            sb.append(getChar(atgc, max));
        }
        bw.write(sb+"\n");
        bw.write(""+hd);

        bw.flush();
        br.close();
        bw.close();
    }

    private static char getChar(int[] atgc, int max) {
        // '사전순으로 가장 앞서는 것을 출력한다' 조건 고려해야됨
        if(max == atgc[0]) return 'A';
        else if(max == atgc[3]) return 'C';
        else if(max == atgc[2]) return 'G';
        else return 'T';
    }
}