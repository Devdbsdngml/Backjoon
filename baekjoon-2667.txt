import java.util.*;
import java.io.*;

public class Main{
    static class Point{
        int x;
        int y;
        Point(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, 1, -1};
    static int[][] house;
    static boolean[][] visited;
    static int homeCnt = 0;
    static int danjiCnt = 0;
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        
        List<Integer> list = new ArrayList<>();
        
        house = new int[n][n];
        visited = new boolean[n][n];
        
        for(int i=0; i<n; i++){
            String input = br.readLine();
            for(int j=0; j<n; j++){
                house[i][j] = input.charAt(j) - '0';
            }
        }
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(house[i][j] == 1 && !visited[i][j]){
                    danjiCnt++;
                    homeCnt = 0;
                    bfs(n, i, j);
                    list.add(homeCnt);
                }
            }
        }
        Collections.sort(list);
        
        System.out.println(danjiCnt);
        for(int i=0; i<list.size(); i++){
            System.out.println(list.get(i));
        }
    }
    
    static void bfs(int n, int x, int y){
        Queue<Point> que = new LinkedList<>();
        que.add(new Point(x, y));
        visited[x][y] = true;
        homeCnt++;
        
        while(!que.isEmpty()){
            Point point = que.poll();
            
            for(int i=0; i<4; i++){
                int nextX = point.x + dx[i];
                int nextY = point.y + dy[i];
                if(0 <= nextX && nextX < n && 0 <= nextY && nextY < n){
                    if(house[nextX][nextY] == 1 && !visited[nextX][nextY]){
                        que.add(new Point(nextX, nextY));
                        visited[nextX][nextY] = true;
                        homeCnt++;
                    }
                }
            }
        }
    }
}